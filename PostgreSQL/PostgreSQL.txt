Que es Postgres 
    Es un motor de base de datos 
    - Open Sourse
    - Objeto-Relacional
    - Usa SQL

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Instalación y configuración
    Vamos a instalar PostgreSQL en nuestra computadora. A continuación veremos el paso a paso y algunos 
    consejos útiles para instalar y configurar correctamente PostgreSQL en nuestro equipo. 
    En éste caso, usaremos Windows, pero los pasos son bastante similares entre los diferentes sistemas 
    operativos.

        Primer paso: ir a https://www.postgresql.org/.

        Ten en cuenta que puedes ver esta página en diferentes idiomas, depende de la configuración 
        predeterminada de idioma de tu navegador.
        Hacer clic en el botón ‘Download’ (Descarga) que se encuentra en la parte inferior derecha. 
           
        Seleccionamos la opción que corresponda con tu sistema operativo, para éste caso hacemos 
        clic en “Windows”:

        Haz clic en el enlace “Download the installer”. Esto nos va a llevar a la Web de Enterprise DB 
        o EDB. EDB es una empresa que ofrece servicios sobre el motor de base de datos PostgreSQL y 
        ofrece un instalador para Postgres de manera gratuita.

        Es altamente recomendable seleccionar la penúltima o antepenúltima versión. Si bien la última 
        versión estable está disponible, en éste caso la 12.0, no es recomendable instalarla en nuestro 
        equipo, ya que al momento de instalarla o usar un servicio en la Nube para Postgres, 
        lo más seguro es que no esté disponible y sólo esté hasta la versión 11.5, que no es la 
        última versión. Esto porque todos los proveedores de Infraestructura no disponen de la 
        versión de Postgres más actual siempre (tardan un poco en apropiar los nuevos lanzamientos).


        Si tienes un equipo con Linux, la instalación la puedes hacer directamente desde los repositorios 
        de Linux, EDB ya no ofrece soporte para instaladores en Linux debido a que se ha vuelto 
        innecesario, el repositorio de Linux con PostgreSQL ofrece una manera mucho más sencilla y 
        estándar para instalar PostgreSQL en linux.

        Segundo paso: descargamos la versión “Windows x86-64” (porque nuestro sistema operativo es de 64 
        bits). En caso de que tu equipo sea de 32 bits debes seleccionar la opción “Windows x86-32”.

        Vamos a descargar la versión 11.5. Hacemos clic en Download y guardamos el archivo que tendrá un 
        nombre similar a:
        “postgresql-11.5-2-windows-x64.exe”

        Ahora vamos a la carpeta donde descargamos el archivo .exe, debe ser de aproximadamente 190 MB, 
        lo ejecutamos.

        Seleccionamos los servicios que queremos instalar. En este caso dejamos seleccionados todos menos 
        “Stack Builder”, pues ofrece la instalación de servicios adicionales que no necesitamos hasta 
        ahora. Luego hacemos clic en siguiente:

        Ahora indicamos la carpeta donde iran guardados los datos de la base de datos, es diferente a la 
        ruta de instalación del Motor de PostgreSQL, pero normalmente será una carpeta de nuestra carpeta 
        de instalación. Puedes cambiar la ruta si quieres tener los datos en otra carpeta. 
        Hacemos clic en siguiente.

        Ingresamos la contraseña del usuario administrador. De manera predeterminada, 
        Postgres crea un usuario super administrador llamado postgres que tiene todos los permisos y 
        acceso a toda la base de datos, tanto para consultarla como para modificarla. 
        En éste paso indicamos la clave de ese usuario super administrador.

        Debes ingresar una clave muy segura y guardarla porque la vas a necesitar después. 
        Luego hacemos clic en siguiente.

        Ahora si queremos cambiar el puerto por donde el servicio de Postgresql estará escuchando 
        peticiones, podemos hacerlo en la siguiente pantalla, si queremos dejar el predeterminado 
        simplemente hacemos clic en siguiente.

        La configuración regional puede ser la predeterminada, no es necesario cambiarla, 
        incluso si vamos a usarla en español, ya que las tildes y las eñes estarán soportadas si 
        dejas la configuración regional predeterminada. Es útil cambiarla cuando quieras dejar de 
        soportar otras funciones de idiomas y lenguajes diferentes a uno específico. 
        Luego hacemos clic en siguiente:

        En pantalla aparecerá el resumen de lo que se va a instalar:

        Al hacer clic en siguiente se muestra una pantalla que indica que PostgreSQL está listo 
        para instalar, al hacer clic de nuevo en siguiente iniciará la instalación, 
        espera un par de minutos hasta que la aplicación termine.

        Una vez terminada la instalación, aparecerá en pantalla un mensaje mostrando que PostgreSQL 
        ha sido instalado correctamente.

        Podemos cerrar ésta pantalla y proceder a comprobar que todo quedó instalado correctamente.

        Vamos a buscar el programa PgAdmin, el cual usaremos como editor favorito para ejecutar en él 
        todas las operaciones sobre nuestra base de datos.

        También vamos a buscar la consola… Tanto la consola como PgAdmin son útiles para gestionar 
        nuestra base de datos, una nos permite ingresar comando por comandos y la otra nos 
        ofrece una interfaz visual fácil de entender para realizar todas las operaciones.

        En el menú de Windows (o donde aparecen instalados todos los programas) buscamos 
        “PgAdmin…”

        Ahora buscamos “SQL Shell…”

        Efectivamente, ahora aparecen las herramientas que vamos a utilizar en éste curso.

        Ahora vamos a crear una base de datos de prueba usando la consola y comprobaremos si existe 
        usando PgAdmin, la crearemos para validar que la conexión con el servicio de base de datos 
        interno funciona correctamente.

        Para ello abrimos la consola, buscamos SQL Shell y lo ejecutamos.

        Lo que vemos en pantalla es la consola esperando que ingresemos cada parámetro para la conexión.

        Primero está el nombre del parámetro. En éste caso es “Server” seguido de unos corchetes que 
        contienen el valor predeterminado. Si presionamos “Enter” sin digitar nada la consola 
        asumirá que te refieres al valor predeterminado, si en éste caso presionamos “Enter” 
        el valor asumido será “Localhost”. Localhost se refiere a nuestra propia máquina, 
        si instalaste la base de datos en el mismo pc que estás usando para la consola, 
        el valor correcto es Localhost o 127.0.0.1 (representan lo mismo).

        Podemos dejar todos los valores predeterminados (presionando “Enter”) 
        hasta que la consola pregunte por la clave del usuario maestro:

        Debemos ingresar la clave que usamos cuando estábamos instalando Postgres, de lo contrario no 
        podremos acceder. Presionamos Enter y veremos a continuación una pantalla que nos 
        indica que estamos logueados en la base de datos y estamos listos para hacer modificaciones.

        De manera predeterminada, la base de datos instalada es Postgres, la cual no debemos tocar, 
        ya que ejecuta funciones propias del motor. Es usada por el Motor de PostgreSQL para interactuar 
        con todas las bases de datos que vayamos a crear en el futuro.

        La siguiente imagen indica que estamos conectados a la base de datos Postgres. 
        Vamos a crear una base de datos nueva y luego saltar el cursor a ésta base de datos 
        recién creada.

        Para ello escribimos el comando “CREATE DATABASE transporte_publico;” 
        y presionamos “Enter”.

        El mensaje “CREATE DATABASE” justo después de la línea que acabamos de escribir 
        indica que la base de datos fue creada correctamente.

        Para saltar a la base de datos recién creada ejecutamos el comando “\c transporte_publico”

        Ahora vamos a validar desde PgAdmin que la base de datos fué creada correctamente. 
        Abrimos PgAdmin y nos encontramos con una lista de items a la izquierda, lo que significa 
        que de manera predeterminada PgAdmin ha creado un acceso a nuestra base de datos local, 
        el cual llamó “PostgreSQL 11”: 

        Al hacer hacer doble clic sobre éste elemento (“PostgreSQL 11”) nos pedirá ingresar la 
        clave que hemos determinado para el super usuario postgres, al igual que la consola, 
        hasta no ingresarla correctamente no nos podremos conectar:

        Ingresamos la clave. Te recomiendo seleccionar la opción “Save Password” o “Guardar Contraseña”. 
        Si la máquina sobre la que estás trabajando es de confianza, que seas sólo tú o tu equipo quien 
        tenga acceso a ella, de lo contrario, no guardes la contraseña para mantenerla segura.
        
        Veremos la lista de bases de datos disponibles, la predeterminada “postgres” y la que acabamos 
        de crear usando la consola, lo que comprueba que la base de datos y la consola funcionan 
        correctamente.

        Ahora procedemos a eliminar la base de datos recién creada para comprobar que PgAdmin está 
        correctamente configurada y si pueda realizar cambios sobre la base de datos.

        Para ello hacemos clic derecho sobre el elemento “transporte_publico” y seleccionamos la opción 
        “Delete/Drop”. Al mensaje de confirmar hacemos clic en OK.

        Con ello, si el elemento “transporte_publico” desaparece del menú de la izquierda 
        comprobamos que PgAdmin funcionan correctamente.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Como conecterse a la base de datos desde la consola 

    Server (Localhost): Numero de ip o nombre de dominio si no es tu pc
    Datebase [postgres]: Para cambiar la base de datos que esta por defecto ingresa la base de datos
                         a la cual quieres ingresar
    Port [5432]: si quieres cambiar el puerto por seguridad aqui los puedes hacer 
    Username [postgres]: Ingrese el nombre de usuario si no es el que se encuentra por defecto
    Password for user postgres: ingrese la contraseña 

////////////////////////////////////////////////////////////////////////////////////////////////////////////

Comandos de Postgres
    SELECT version();               -> Consultamos la version de postgres que esta instalada
    \h                              -> Muestra todos los comandos de SQL que se pueden usar en postgres
    \h ComandoSQl                   -> Muestra todo lo que se puede hacer con ese comando
    Comandos de navegación y consulta de información
            \?                      -> Muestra todos los comandos
            \l                      -> Lista todas las bases de datos que tenemos instaladas
            
            \dt                     -> Muestra las tablas que tiene la base de datos de postgres 
            \d nombreTabla          -> Consultamos la tabla de la base de datos
            \df                     -> listar las funciones disponibles de la base de datos actual  
            \dn                     -> Listar los esquemas de la base de datos actual  
            \dv                     -> Listar vistas de la base de datos actual
            \du                     -> listar los usuarios y sus roles de la base de datos actual
            
            \c nombreBasedatos      -> Cambia de base de datos  

    Comandos de inspección y ejecución            
            \g                      -> Permite volver a ejecutar la misma funcion que acabas de ejecutar en la 
                                    consola
            \s                      -> Ver el historial de comandos ejecutados
            \s NombreArchivo        -> Si se quiere guardar la lista de comandos ejecutados en un 
                                       archivo de texto plano

            \i NombreArchivo        -> Ejecuta los comandos desde un archivo

            \e                      -> Permite abrir un editor de texto plano, escribir comandos y ejecutar 
                                       en lote. \e abre el editor de texto, escribir allí todos los comandos, 
                                       luego guardar los cambios y cerrar, al cerrar se ejecutarán todos los 
                                       comandos guardados.
            \ef                     -> Equivalente al comando anterior pero permite editar también 
                                       funciones en PostgreSQL

        Comandos para debug y optimización
            \timing                 -> Muestra el tiempo en el que se ejecuto una consulta en la base de 
                                        datos 
            
        Comandos para cerrar la consola
            \q Cerrar la consola

        Ejecutando consultas en la base de datos usando la consola
            De manera predeterminada PostgreSQL no crea bases de datos para usar, debemos crear nuestra 
            base de datos para empezar a trabajar, verás que existe ya una base de datos llamada postgres 
            pero no debe ser usada ya que hace parte del CORE de PostgreSQL y sirve para gestionar 
            las demás bases de datos.

            Para crear una base de datos debes ejecutar la consulta de creación de base de datos, 
            es importante entender que existe una costumbre no oficial al momento de escribir consultas; 
            consiste en poner en mayúsculas todas las palabras propias del lenguaje SQL cómo CREATE, 
            SELECT, ALTE, etc y el resto de palabras como los nombres de las tablas, columnas, 
            nombres de usuarios, etc en minúscula. No está claro el porqué de esta especie de “estándar” 
            al escribir consultas SQL pero todo apunta a que en el momento que SQL nace, no existían 
            editores de consultas que resaltaran las palabras propias del lenguaje para diferenciar 
            fácilmente de las palabras que no son parte del lenguaje, por eso el uso de mayúsculas y 
            minúsculas.

            Las palabras reservadas de consultas SQL usualmente se escriben en mayúscula, ésto para 
            distinguir entre nombres de objetos y lenguaje SQL propio, no es obligatorio, pero podría 
            serte útil en la creación de Scripts SQL largos.

            Vamos ahora por un ligero ejemplo desde la creación de una base de datos, la creación de una 
            tabla, la inserción, borrado, consulta y alteración de datos de la tabla.

            Primero crea la base de datos, “CREATE DATABASE transporte;” sería el primer paso.

            Ahora saltar de la base de datos postgres que ha sido seleccionada de manera predeterminada a 
            la base de datos transporte recién creada utilizando el comando \c transporte.

            Ahora vamos a crear la tabla tren, el SQL correspondiente sería:
                CREATE TABLE tren ( id serial NOT NULL, modelo character varying, capacidad integer, 
                CONSTRAINT tren_pkey PRIMARY KEY (id) );

            La columna id será un número autoincremental (cada vez que se inserta un registro se 
            aumenta en uno), modelo se refiere a una referencia al tren, capacidad sería la cantidad de 
            pasajeros que puede transportar y al final agregamos la llave primaria que será id.

            Ahora que la tabla ha sido creada, podemos ver su definición utilizando el comando \d tren

            PostgreSQL ha creado el campo id automáticamente cómo integer con una asociación predeterminada 
            a una secuencia llamada ‘tren_id_seq’. De manera que cada vez que se inserte un valor, id tomará 
            el siguiente valor de la secuencia, vamos a ver la definición de la secuencia. Para ello, \d 
            tren_id_seq es suficiente:

            Vemos que la secuencia inicia en uno, así que nuestra primera inserción de datos dejará a la 
            columna id con valor uno.
                INSERT INTO tren( modelo, capacidad ) VALUES (‘Volvo 1’, 100);

            Consultamos ahora los datos en la tabla:
                SELECT * FROM tren;

            Vamos a modificar el valor, establecer el tren con id uno que sea modelo Honda 0726. 
            Para ello ejecutamos la consulta tipo UPDATE tren 
                SET modelo = 'Honda 0726' Where id = 1;

            Verificamos la modificación 
                SELECT * FROM tren;

            Ahora borramos la fila: 
                DELETE FROM tren WHERE id = 1;    

            Verificamos el borrado 
                SELECT * FROM tren;    

            El borrado ha funcionado tenemos 0 rows, es decir, no hay filas. Ahora activemos la herramienta que 
            nos permite medir el tiempo que tarda una consulta 
                \timing

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Archivos de configuracion
    Para emcontrarlos 
        Entramos a PgAdmin -> SHOW config_file;
        Muestra la ruta 

    - postgresql.conf   -> Es donde se hace el registro de cuales son las QUERYS mas lentas
                           donde podemos crear duplicados de las bases de datos
    - pg_hba.conf       -> Muestra los roles y tipos de acceso que tienen las bases de datos
    - pg_ident.conf     -> Permite a que usuario tiene cada rol  

//////////////////////////////////////////////////////////////////////////////////////////////////////////////    

Tipos de datos 
    https://www.todopostgresql.com/postgresql-data-types-los-tipos-de-datos-mas-utilizados/

    Name	                                    Aliases	                Description
    bigint	                                    int8	                signed eight-byte integer
    bigserial	                                serial8	                autoincrementing eight-byte integer
    bit [ (n) ]	 	                                                    fixed-length bit string
    bit varying [ (n) ]	                        varbit [ (n) ]	        variable-length bit string
    boolean	                                    bool	                logical Boolean (true/false)
    box	 	                                                            rectangular box on a plane
    bytea	 	                                                        binary data (“byte array”)
    character [ (n) ]	                        char [ (n) ]	        fixed-length character string
    character varying [ (n) ]	                varchar [ (n) ]	        variable-length character string
    cidr	 	                                                        IPv4 or IPv6 network address
    circle	 	                                                        circle on a plane
    date	 	                                                        calendar date (year, month, day)
    double precision	                        float8	                double precision floating-point 
                                                                        number (8 bytes)
    inet	 	                                                        IPv4 or IPv6 host address
    integer	                                    int, int4               signed four-byte integer
    interval [ fields ] [ (p) ]	 	                                    time span
    json	 	                                                        textual JSON data
    jsonb	 	                                                        binary JSON data, decomposed
    line	 	                                                        infinite line on a plane
    lseg	 	                                                        line segment on a plane
    macaddr	 	                                                        MAC (Media Access Control) address
    macaddr8	 	                                                    MAC (Media Access Control) address 
                                                                        (EUI-64 format)
    money	 	                                                        currency amount
    numeric [ (p, s) ]	                        decimal [ (p, s) ]      exact numeric of selectable     
                                                                        precision
    path	 	                                                        geometric path on a plane
    pg_lsn	 	                                                        PostgreSQL Log Sequence Number
    point	 	                                                        geometric point on a plane
    polygon	 	                                                        closed geometric path on a plane
    real	                                    float4	                single precision floating-point 
                                                                        number (4 bytes)
    smallint	                                int2	                signed two-byte integer
    smallserial	                                serial2	                autoincrementing two-byte integer
    serial	                                    serial4	                autoincrementing four-byte integer
    text	 	                                                        variable-length character string
    time [ (p) ] [ without time zone ]	 	                            time of day (no time zone)
    time [ (p) ] with time zone	                 timetz	                time of day, including time zone
    timestamp [ (p) ] [ without time zone ]     	 	                date and time (no time zone)
    timestamp [ (p) ] with time zone	         timestamptz	        date and time, including time zone
    tsquery	 	                                                        text search query
    tsvector	 	                                                    text search document
    txid_snapshot	 	                                                user-level transaction ID snapshot
    uuid	 	                                                        universally unique identifier
    xml	 	                                                            XML data

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Jerarquía de Bases de Datos

    Toda jerarquía de base de datos se basa en los siguientes elementos:

        Servidor de base de datos: Computador que tiene un motor de base de datos instalado y en ejecución.

        Motor de base de datos: Software que provee un conjunto de servicios encargados de administrar 
                                una base de datos.

        Base de datos: Grupo de datos que pertenecen a un mismo contexto.

        Esquemas de base de datos en PostgreSQL: Grupo de objetos de base de datos que guarda relación  
                                                entre sí (tablas, funciones, relaciones, secuencias).

        Tablas de base de datos: Estructura que organiza los datos en filas y columnas formando una matriz.

    PostgreSQL es un motor de base de datos.

        La estructura de la base de datos diseñada para el reto corresponde a los siguientes
        elementos:

            La base de datos se llama transporte, usaremos su esquema predeterminado public.

                El esquema public contiene las siguientes tablas:

                    - Estación: Contiene la información de las estaciones de nuestro sistema, incluye 
                                datos de nombre con tipo de dato texto y dirección con tipo de dato 
                                texto, junto con un número de identificación único por estación. 

                    - Pasajero: Es la tabla que contiene la información de las personas que viajan en 
                                nuestro sistema de transporte masivo, sus columnas son nombre tipo de 
                                dato texto con el nombre completo de la persona, direccion_residencia 
                                con tipo de dato texto que indica dónde vive la persona, fecha_nacimiento 
                                tipo de dato texto y un ID único tipo de dato numérico para identificar a 
                                cada persona.

                    - Tren:     Almacena la información de los trenes de nuestro sistema, cada tren 
                                tiene un modelo con tipo de dato texto y una capacidad con tipo de 
                                dato numérico que representa la cantidad de personas que puede llevar 
                                ese tren, también tiene un ID único por tren.

                Y las tablas de relaciones entre cada uno de los elementos anteriores son:

                    - Trayecto: Relaciona los trenes con las estaciones, simula ser las rutas que cada 
                                uno de los trenes pueden desarrollar entre las estaciones

                    - Viaje:    Relaciona Trayecto con Pasajero ilustrando la dinámica entre los viajes 
                                que realizan las personas, los cuales parten de una estación y se hacen 
                                usando un tren.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Acciones
    CREATE  -> Sirve para inicializar una sin ningun tipo de dato
    ALTER   -> Sirve para agregar columnas o eliminar columnas cambiar indices 
    DROP    -> Permite crear una tabla
    
    Create (Database , Table, view)

            Para crear una base de datos 
                CREATE DATEBASE Nombre_base_datos; o CREATE SCHEMA Nombre_base_datos;

            Para utilizar esta Base de datos por default     
                USE DATEBASE Nombre_base_datos;
             
            Para crear una tabla 
                CREATE TABLE 'Nombre_base_datos'. 'Nombre_tabla'(
                    Dato_1 int,
                    Dato_2 varchar (255)
                );
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Particiones
    - Consiste en una separacion fisica de datos 
    - Estructura logica 
    
    Simulacion de creacion
        - Se crea una nueva tabla 

        - cambiamos en general Partioned table? a yes 

        - Agregamos campos normales sin primary key ya que nos es posible crear particiones con una primary key 
        
        - Vamos a pa pestaña particion y elegimos el tipo de particion

        - Agregamos la llave por la cual vamos a hacer la particion (Partition key)

        - Luego de haberla creado hacemos 
            CREATE TABLE nombreDeLaTablaParticionDato PARTITION nombreDeLaTablaParticion 
            FOR VALUES FROM ('datos') to ('datos');

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Roles 
    Pueden 
        - Crear y eliminar
        - Asignar atributos
        - Agrupar con otros roles
        - Roles predeterminados

    Para saber que caracteristicas tiene cada rol por consola
    \h CREATE ROLE    

////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
Caracteristicas de los roles
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Creacion, Edicion, eliminacion de roles por consola

    CREAR ROLES 
        CREATE ROLE nombredeusuario
        WITH caracteristicas;
    -----------------------------------------------------------------------------------------------------------------

    Crear contraseña en un rol 
        CREATE ROLE nombredeusuario
        WITH LOGIN;
        
        ALTER ROLE nombredeusuario LOGIN PASSWORD 'contraseña' ;
    -------------------------------------------------------------------------------------------------------------------

    Modificar roles
        ALTER ROLE nombredeusuario
        WITH caracteristicas;
    -------------------------------------------------------------------------------------------------------------------
    Borrar usuario     

        DROP ROLE nombredeusuario;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Creacion de roles por PgAdmin
    Buscamos Login/Grup Role
        - click derecho Create 
        - Login/Grup Role
            General 
                - En Name (Usuario)
                - En Comments (escribimos lo que hace el usuario)   opcional
            Definition 
                - En Password (contraseña)
                
            Privilegies (podemos ver todos los atributos)
                - Cambiamos cada una de las opciones que el usuario puede hacer

            Membership
                - Si hemos creado un grupo de permisos podemos asigmarlo para el usuario 

            Parameters
                - Podemos caracterizar variables y atributos en la base de datos 

    Buscamos Tables
        - Click derecho
        - Grand Wizard 
            Pregunta que tablas queremos afectar 
            - Next
                - Seleccionamos los permisos que le amos a dar al Usuario
                    - Hacemos click en el +
                    - Grantee (seleccionamos el usuario al que le vamos a dar los permisos)
                    - Privileges (Seleccionamos los privilegios)
                    Finish

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Para saber el formato de del dato date 
    SELECT current_date;
